! ***********************************************************************
!
!   Copyright (C) 2010-2019  Bill Paxton & The MESA Team
!
!   this file is part of mesa.
!
!   mesa is free software; you can redistribute it and/or modify
!   it under the terms of the gnu general library public license as published
!   by the free software foundation; either version 2 of the license, or
!   (at your option) any later version.
!
!   mesa is distributed in the hope that it will be useful, 
!   but without any warranty; without even the implied warranty of
!   merchantability or fitness for a particular purpose.  see the
!   gnu library general public license for more details.
!
!   you should have received a copy of the gnu library general public license
!   along with this software; if not, write to the free software
!   foundation, inc., 59 temple place, suite 330, boston, ma 02111-1307 usa
!
! ***********************************************************************
 
      module run_star_extras

      use star_lib
      use star_def
      use const_def
      use math_lib
      use auto_diff

      use captureRate
      !use capture
      !use escapeVelocity
      use nchiCoefficient
      !use diffCapture
      use brent
      use energyFunction

      implicit none
      
      ! these routines are called by the standard run_star check_model
      contains
      
         subroutine extras_controls(id, ierr)
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         
         ! this is the place to set any procedure pointers you want to change
         ! e.g., other_wind, other_mixing, other_energy  (see star_data.inc)


         ! the extras functions in this file will not be called
         ! unless you set their function pointers as done below.
         ! otherwise we use a null_ version which does nothing (except warn).
         s% extras_startup => extras_startup
         s% extras_start_step => extras_start_step
         s% extras_check_model => extras_check_model
         s% extras_finish_step => extras_finish_step
         s% extras_after_evolve => extras_after_evolve
         s% how_many_extra_history_columns => how_many_extra_history_columns
         s% data_for_extra_history_columns => data_for_extra_history_columns
         s% how_many_extra_profile_columns => how_many_extra_profile_columns
         s% data_for_extra_profile_columns => data_for_extra_profile_columns  

         s% how_many_extra_history_header_items => how_many_extra_history_header_items
         s% data_for_extra_history_header_items => data_for_extra_history_header_items
         s% how_many_extra_profile_header_items => how_many_extra_profile_header_items
         !s% data_for_extra_profile_header_items => data_for_extra_profile_header_items

         ! this is the place to set any procedure pointers you want to change
         ! e.g., other_wind, other_mixing, other_energy  (see star_data.inc)
         !s% other_energy => my_energy_routine
         


      end subroutine extras_controls
      
      
      subroutine extras_startup(id, restart, ierr)
         integer, intent(in) :: id
         logical, intent(in) :: restart
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
      end subroutine extras_startup
      

      integer function extras_start_step(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_start_step = 0
      end function extras_start_step


      ! returns either keep_going, retry, or terminate.
      integer function extras_check_model(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_check_model = keep_going         
         if (.false. .and. s% star_mass_h1 < 0.35d0) then
            ! stop when star hydrogen mass drops to specified level
            extras_check_model = terminate
            write(*, *) 'have reached desired hydrogen mass'
            return
         end if


         ! if you want to check multiple conditions, it can be useful
         ! to set a different termination code depending on which
         ! condition was triggered.  MESA provides 9 customizeable
         ! termination codes, named t_xtra1 .. t_xtra9.  You can
         ! customize the messages that will be printed upon exit by
         ! setting the corresponding termination_code_str value.
         ! termination_code_str(t_xtra1) = 'my termination condition'

         ! by default, indicate where (in the code) MESA terminated
         if (extras_check_model == terminate) s% termination_code = t_extras_check_model
      end function extras_check_model


      integer function how_many_extra_history_columns(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_history_columns = 0
      end function how_many_extra_history_columns
      
      
      subroutine data_for_extra_history_columns(id, n, names, vals, ierr)
         integer, intent(in) :: id, n
         character (len=maxlen_history_column_name) :: names(n)
         real(dp) :: vals(n)
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         
         ! note: do NOT add the extras names to history_columns.list
         ! the history_columns.list is only for the built-in history column options.
         ! it must not include the new column names you are adding here.
         

      end subroutine data_for_extra_history_columns

      
      integer function how_many_extra_profile_columns(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_profile_columns = 1
      end function how_many_extra_profile_columns
      
      
      subroutine data_for_extra_profile_columns(id, n, nz, names, vals, ierr)
         integer, intent(in) :: id, n, nz
         character (len=maxlen_profile_column_name) :: names(n)
         real(dp) :: vals(nz,n)
         real(dp) :: mInMsun
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         integer :: k
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         
         ! note: do NOT add the extra names to profile_columns.list
         ! the profile_columns.list is only for the built-in profile column options.
         ! it must not include the new column names you are adding here.

         ! here is an example for adding a profile column
         !if (n /= 1) stop 'data_for_extra_profile_columns'
         names(1) = 'extra_heat'
         do k = 1, nz
            vals(k,1) = s% extra_heat(k) %val
         end do
         
      end subroutine data_for_extra_profile_columns


      integer function how_many_extra_history_header_items(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_history_header_items = 0
      end function how_many_extra_history_header_items


      subroutine data_for_extra_history_header_items(id, n, names, vals, ierr)
         integer, intent(in) :: id, n
         character (len=maxlen_history_column_name) :: names(n)
         real(dp) :: vals(n)
         type(star_info), pointer :: s
         integer, intent(out) :: ierr
         ierr = 0
         call star_ptr(id,s,ierr)
         if(ierr/=0) return

         ! here is an example for adding an extra history header item
         ! also set how_many_extra_history_header_items
         ! names(1) = 'mixing_length_alpha'
         ! vals(1) = s% mixing_length_alpha

      end subroutine data_for_extra_history_header_items


      integer function how_many_extra_profile_header_items(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_profile_header_items = 0
      end function how_many_extra_profile_header_items


      subroutine data_for_extra_profile_header_items(id, n, nz, names, vals, ierr)
      	 use star_def, only: star_info, maxlen_profile_column_name
      	 use const_def, only: dp
         integer, intent(in) :: id, n, nz
         character (len=maxlen_profile_column_name) :: names(n)
         real(dp) :: vals(nz,n)
         type(star_info), pointer :: s
         integer, intent(out) :: ierr
         integer :: k
         ierr = 0
         call star_ptr(id,s,ierr)
         if(ierr/=0) return


      end subroutine data_for_extra_profile_header_items


      ! returns either keep_going or terminate.
      ! note: cannot request retry; extras_check_model can do that.
      integer function extras_finish_step(id)
         integer, intent(in) :: id
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_finish_step = keep_going

         ! to save a profile, 
            ! s% need_to_save_profiles_now = .true.
         ! to update the star log,
            ! s% need_to_update_history_now = .true.

         ! see extras_check_model for information about custom termination codes
         ! by default, indicate where (in the code) MESA terminated
         if (extras_finish_step == terminate) s% termination_code = t_extras_finish_step
      end function extras_finish_step
      
      
      subroutine extras_after_evolve(id, ierr)
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
      end subroutine extras_after_evolve

      subroutine my_energy_routine(id, ierr)
         use const_def, only: Rsun
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         integer :: k

         real(dp) :: mchi, coefficient, Ndarkmatter
         real(dp) :: TchivalH, TchivalHe
         real(dp), allocatable :: energyHArray(:), energyHeArray(:), energyTotArray(:)
         real(dp), allocatable :: massArray(:), rArray(:), rhoArray(:), tempArray(:)
         real(dp), allocatable :: xHArray(:), yHeArray(:), nchiArray(:)
         integer :: maxZone
         real(dp) :: mH, mHe, nucmassconv
         character(len=37) :: filename
         integer :: filename_index

         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return


         !Set the number of zones in the star
         maxZone = s% nz - 1
         
         !Allocate the arrays
         allocate(massArray(maxZone),rArray(maxZone),rhoArray(maxZone),tempArray(maxZone))
         allocate(xHArray(maxZone),yHeArray(maxZone))
         allocate(nchiArray(maxZone))
         allocate(energyHArray(maxZone),energyHeArray(maxZone))

         do k=1, s% nz - 1
            !Copy mass array in Msun units
            massArray(s% nz - k) = s% m(k)/(1.988D33)
            !Copy radius array in Rsun units
            rArray(s% nz - k) = s% r(k)/(6.957D10)
            !Copy density array in g/cc
            rhoArray(s% nz - k) = s% rho(k)
            !Copy temperature array in Kelvin
            tempArray(s% nz - k) = s% T(k)
            !Copy Hydrogen mass fraction array
            xHArray(s% nz - k) = s% X(k)
            !Copy Helium mass fraction array
            yHeArray(s% nz - k) = s% Y(k)
         end do

         !atomic masses in grams
         mH = 1.674D-24
         mHe = 6.646477D-24

         !Convert mass fraction to number density
         xHArray = (xHArray * rhoArray)/mH
         yHeArray = (yHeArray * rhoArray)/mHe

         !Convert atomic masses to GeV
         nucmassconv = 5.61D23
         mH = mH*nucmassconv
         mHe = mHe*nucmassconv

         !Set dark matter mass
         mchi = 10.d0

         !Find the normalization of the dark matter number density distribution
         coefficient = nchiCoeff(mchi, &
                                 massArray, &
                                 rArray, &
                                 rhoArray, &
                                 tempArray, &
                                 maxZone)
         
         Ndarkmatter = captureRateFunc(mchi, &
                     massArray, &
                     rArray, &
                     rhoArray, &
                     maxZone, &
                     mH, mHe, &
                     xHarray,yHeArray) * s% star_age * 3.154_dp * (10._dp**(7._dp))
         
         coefficient = Ndarkmatter/coefficient
         !print*,"coefficient", coefficient
         
         !At this point calculate nchi *array*
         !and scale it by coefficient
         do k = 1, s% nz - 1
         nchiArray(k) = coefficient * nchiFunc(rArray(k), mchi, &
                  massArray, &
                  rArray, &
                  rhoArray, &
                  tempArray, &
                  maxZone)
         end do

         !Find the correct value of Tchi
         !inputs are:
         !the mass of the dark matter particle
         !the mass of the species of consideration
         !the array for the mass density of the star as a function of radius
         !the array for the number density of the dark matter as a function of radius
         !the array for the number density of the species as a function of radius
         !the array for the temperature of the star as a function of radius
         !the length of these arrays

         !HYDROGEN
         TchivalH = findTchi(mchi, mH, &
                     massArray, &
                     rArray, &
                     rhoArray, &
                     nChiArray, &
                     xHArray, &
                     tempArray, &
                     maxZone)
         !HELIUM
         TchivalHe = findTchi(mchi, mHe, &
                     massArray, &
                     rArray, &
                     rhoArray, &
                     nChiArray, &
                     yHeArray, &
                     tempArray, &
                     maxZone)

         do k=1, s%nz - 1
            energyHArray(k) = (1.602D-3)*energyFunc(mchi, mH, &
                        nchiArray(k), &
                        xHArray(k), &
                        rhoArray(k), &
                        tempArray(k), &
                        TchivalH)
            energyHeArray(k) = (1.602D-3)*energyFunc(mchi, mHe, &
                        nchiArray(k), &
                        yHeArray(k), &
                        rhoArray(k), &
                        tempArray(k), &
                        TchivalHe)
            s% extra_heat(s%nz - k) %val = energyHArray(k) + energyHeArray(k) ! erg/g/sec
            !print*, "extra energy", s% extra_heat(s%nz - k) %val
         end do
         
         return

      end subroutine my_energy_routine

      end module run_star_extras
      
